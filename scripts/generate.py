#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import datetime
import csv

def convert(path=None):
    """
    Loads data from list_raw and generates files in the following formats:
        - newline
        - json
        - python
        - js (ES5)
        - js (ES6)
        - php
        - yaml
    """
    file_path = os.path.join(path, "list_raw.txt")

    with open(file_path, "r") as f:
        raw_usernames = f.readlines()
        f.close()

    usernames = [x.strip("\n") for x in raw_usernames]
    usernames = [x for x in usernames if x and not x.startswith("#")]
    usernames.sort()

    autogen_header = get_autogen_header(path=path)

    write_optimized_txt(path, usernames)
    write_json(path, usernames)
    write_csv(path, usernames)
    write_python(path, usernames, autogen_header)
    write_es6(path, usernames, autogen_header)
    write_commonjs(path, usernames, autogen_header)
    write_php(path, usernames, autogen_header)
    write_yaml(path, usernames, autogen_header)


def get_autogen_header(path=None):
    file_path = os.path.join(path, "list_raw.txt")

    with open(file_path, "r") as f:
        data_version = f.readlines()[2]
        f.close()

    data_version = data_version[2:]
    data_version = data_version.rstrip()

    current_time = str(datetime.datetime.now())

    autogen_header = "This file was generated by The-Big-Username-Blocklist {} (at {})".format(  # NOQA
        data_version, current_time
    )

    return autogen_header


def write_optimized_txt(path, usernames):
    file_path = os.path.join(path, "list.txt")

    optimized_data = "".join("{}\n".format(e) for e in usernames)
    optimized_data = optimized_data.strip()

    with open(file_path, "w") as f:
        f.write(optimized_data)
        f.close()


def write_json(path, usernames):
    file_path = os.path.join(path, "list.json")

    with open(file_path, "w") as f:
        json.dump(usernames, f, indent=4, ensure_ascii=False)
        f.close()


def write_csv(path, usernames):
    file_path = os.path.join(path, "list.csv")

    with open(file_path, "w") as f:
        writer = csv.writer(f, delimiter=',')
        writer.writerow(usernames)
        f.close()


def write_python(path, usernames, autogen_header):
    file_path = os.path.join(path, "list.py")

    with open(file_path, "w", newline='') as f:
        f.write(f"# {autogen_header}\n")
        f.write(f"data = {usernames}")
        f.close()


def write_es6(path, usernames, autogen_header):
    file_path = os.path.join(path, "list.js")

    with open(file_path, "w") as f:
        f.write(f"// {autogen_header}\n")
        f.write(f"export default {usernames};")
        f.close()


def write_commonjs(path, usernames, autogen_header):
    file_path = os.path.join(path, "list-commonjs.js")

    with open(file_path, "w") as f:
        f.write(f"// {autogen_header}\n")
        f.write(f"module.exports = {usernames};")
        f.close()


def write_php(path, usernames, autogen_header):
    file_path = os.path.join(path, "list.php")

    with open(file_path, "w") as f:
        f.write("<?php \n")
        f.write(f"// {autogen_header}\n")
        f.write(f"return {usernames};")
        f.close()


def write_yaml(path, usernames, autogen_header):
    file_path = os.path.join(path, "list.yaml")

    with open(file_path, "w") as f:
        f.write(f"# {autogen_header}\n")
        f.write("---\n")
        f.write("usernames:\n")
        for username in usernames:
            f.write(f"  - \"{username}\"\n")
        f.close()


if __name__ == "__main__":
    current_dir = os.path.dirname(os.path.realpath(__file__))
    list_dir = os.path.join(current_dir, os.pardir)

    convert(path=list_dir)
